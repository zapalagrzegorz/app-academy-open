skip
c
node
last
n
last
n
last
n
last.next
last
n
list=
list-
val
key
s
c
s
c
empty_list
empty_list.first
c
v
n
empty_list
n
skip
c
n
last
node.prev
node
n
node
n
first.key
first
node.prev.next
node.prev
node
n
last.next
last
c
first.next == last
first.next
first
skip
c
skip
last
last.prev
skip
c
last
c
 @head.next == @tail
@tail
@head.next
c
@tail.object_id
@head.next.object_id
@head.next.objectId
@head.next.id
@head.next == @tail.prev
@tail.prev
list=
@head.next
@head
c
@head.prev
@head
c
self[num]
c
skip
c
[num]
bucket.include?(num)
bucket
n
@store
c
set.include?(1)
display set
set
c
s
