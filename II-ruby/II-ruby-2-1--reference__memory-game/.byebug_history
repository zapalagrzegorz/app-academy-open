c
n
memory_puzzle.valid_play?("0,0")
n
memory_puzzle.guessed[0]
n
memory_puzzle.valid_play?("a")
n
memory_puzzle.valid_play?("5,0")
n
memory_puzzle.valid_play?("0,2")
memory_puzzle.valid_play?
memory_puzzle.valid_play
memory_puzzle
c
memory_puzzle.ai_player.known_cards
n
memory_puzzle.ai_player.known_cards
c
memory_puzzle.ai_player.known_cards
AIGuessSecond
n
c
memory_puzzle.ai_player.known_cards.keys
memory_puzzle.ai_player.known_cards
uknown_tiles
c
AIGuessSecond
n
unless knownPositions.include?(AIGuess)
knownPositions.include?(AIGuess)
AIGuess
knownPositions
n
picked_card_position
n
picked_card_position
n
possible_picks.keys - @known_cards.keys
@known_cards.keys
@known_cards
@know_cards
possible_picks.keys
possible_picks
possible_picks.key
s
n
s
uknown_tiles
c
n
self
guesses_list
s
c
self
n
s
uknown_tiles
c
knownPositions
AIGuess
c
exit
uknown_tiles
unknown_tiles
c
ai_player.make_guess(uknown_tiles)
AIGuess
c
test_board.get_unknown_tiles
c
AIGuessSecond
n
c
self
@matching_pair.length
s
memory_puzzle.ai_player.match?
memory_puzzle.ai_player
c
n
c
n
c
self
s
c
AIplayer_known_card_key, AIplayer_known_card_val = memory_puzzle.ai_player.known_cards.first
memory_puzzle.ai_player.known_cards.first
memory_puzzle.ai_player
c
exit
n
display @known_cards
@known_cards
c
x
c
self
exit
self
c
@known_cards
n
@known_cards
position
exit
@known_cards.values
matching_value
n
@known_cards.values
n
@matching_pair.length.positive?
s
n
unknown_tile_position
guesses_list[unknown_tile_position]
n
unknown_keys
n
guesses_list.keys - @known_cards.keys
@known_cards.keys
guesses_list.keys
@known_cards.keys
s
@guessed
possible_guesses
n
@board.get_unknown_tiles
@board.get_uknown_tiles
n
player_input
exit
AIGuessFirst
n
exit
AIGuessFirst
n
exit
previous_guess
previuos_guess
previos_guess
s
exit
AIGuessFirst
n
exit
self
@matching_pair
s
n
s
exit
memory_puzzle.ai_player
c
@matching_pair
s
 @known_cards
 @known_cards.keys
n
guesses_list[unknown_tile_position]
n
unknown_keys[0]
n
guesses_list.keys - @known_cards.keys
@known_cards.keys
guesses_list.keys
s
c
exit
exi
guesses_list.keys - @known_cards.keys
guesses_list.keys
@known_cards.keys
@known_cards.keys - guesses_list.keys
s
exit
@known_cards
guesses_list
guesses_lis
s
c
AIGuessFirst
n
c
exit
n
c
guesses_list[unknown_tile_position]
guesses_list
unknown_tile_position
guesses_list[unknown_tile_position]
n
guesses_list.keys[0]
guess_list.keys[0]
n
@known_cards.keys.length.positive?
@known_cards.keys
s
c
@known_cards.keys.lenght
s
c
exit
@known_card_keys.include?(position)
@known_card_keys
s
self
guesses_list
s
exit
AIGuessSecond
n
AIGuessFirst
n
exit
@known_cards.values
@known_cards
n
@known_cards
@matching_pair
list=
self
var all
var
info program
info
memory_puzzle.ai_player
s
memory_puzzle.ai_player.known_cards
exit
@known_cards.values
exit
matching_value
s
exit
@matching_pair
exit
guesses_list
s
exit
ai_second_guess
n
c
exit
c
tile.value
exit
tile
tile.to_s
exit
exi
 memory_puzzle.ai_player
exit
c
