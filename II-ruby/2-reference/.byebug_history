exit
AIGuessFirst
n
exit
AIGuessFirst
n
exit
previous_guess
previuos_guess
previos_guess
s
exit
AIGuessFirst
n
exit
self
@matching_pair
s
n
s
exit
memory_puzzle.ai_player
c
@matching_pair
s
 @known_cards
 @known_cards.keys
n
guesses_list[unknown_tile_position]
n
unknown_keys[0]
n
guesses_list.keys - @known_cards.keys
@known_cards.keys
guesses_list.keys
s
c
exit
exi
guesses_list.keys - @known_cards.keys
guesses_list.keys
@known_cards.keys
@known_cards.keys - guesses_list.keys
s
exit
@known_cards
guesses_list
guesses_lis
s
c
AIGuessFirst
n
c
exit
n
c
guesses_list[unknown_tile_position]
guesses_list
unknown_tile_position
guesses_list[unknown_tile_position]
n
guesses_list.keys[0]
guess_list.keys[0]
n
@known_cards.keys.length.positive?
@known_cards.keys
s
c
@known_cards.keys.lenght
s
c
exit
@known_card_keys.include?(position)
@known_card_keys
s
self
guesses_list
s
exit
AIGuessSecond
n
AIGuessFirst
n
exit
@known_cards.values
@known_cards
n
@known_cards
@matching_pair
list=
self
var all
var
info program
info
memory_puzzle.ai_player
s
memory_puzzle.ai_player.known_cards
exit
@known_cards.values
exit
matching_value
s
exit
@matching_pair
exit
guesses_list
s
exit
ai_second_guess
n
c
exit
c
tile.value
exit
tile
tile.to_s
exit
exi
 memory_puzzle.ai_player
exit
c
exit
memory_puzzle.board
memory_puzzle
exit
memory_puzzle.ai_player.make_guess(uknown_tiles)
exit
uknown_tiles
c
n
memory_puzzle.board
memory_puzzle.board.reveal(memory_puzzle.guessed[0])
memory_puzzle.board
memory_puzzle
exit
memory_puzzle.guessed
memory_puzzle
exit
memory_puzzle
c
board
board[player_input]
n
@guessed[0]
n
s
c
disable breakpoints
disable
c
n
valid_input
exit
valid_input
exit
c
exit
test_board["0,0"]
test_board
c
n
memory_puzzle
exit
n
list=
 memory_puzzle.board
exit
memory_puzzle.board
display memory_puzzle.board[memory_puzzle.guessed[0]]
exit
test_board[row_idx.to_s, column_idx.to_s]
s
n
list=
=
line=
test_board
display card
n
c
exit
@grid
column
row
c
exit
@guessed[0]
player_input
player_input == @guessed[0]
n
s
n
player_input == @guessed[0]
player_input
skip
c
finish
c
@value == other_value
other_value
other
n
exit
other.reveal
other
n
display @value
display other_value
exit
other.reveal.to_s
other.value
@value
value
other
exit
other
exit
card == test_board.grid[row_idx][column_idx]
display test_board.grid[row_idx][column_idx]
display card
display test_board.grid
c
card_values
n
card_values
c
s
test_board.grid
@grid
c
@grid
s
exit
@grid
s
@grid
@grid.board
card_values[row_idx * 4 + column_idx]
row_idx
card_values[row_idx]
card_values
column
s
c
n
exit
test_board.grid
n
c
n
card_values
n
ALPHABET
exit
