c
n
memory_puzzle.board
memory_puzzle.board.reveal(memory_puzzle.guessed[0])
memory_puzzle.board
memory_puzzle
exit
memory_puzzle.guessed
memory_puzzle
exit
memory_puzzle
c
board
board[player_input]
n
@guessed[0]
n
s
c
disable breakpoints
disable
c
n
valid_input
exit
valid_input
exit
c
exit
test_board["0,0"]
test_board
c
n
memory_puzzle
exit
n
list=
 memory_puzzle.board
exit
memory_puzzle.board
display memory_puzzle.board[memory_puzzle.guessed[0]]
exit
test_board[row_idx.to_s, column_idx.to_s]
s
n
list=
=
line=
test_board
display card
n
c
exit
@grid
column
row
c
exit
@guessed[0]
player_input
player_input == @guessed[0]
n
s
n
player_input == @guessed[0]
player_input
skip
c
finish
c
@value == other_value
other_value
other
n
exit
other.reveal
other
n
display @value
display other_value
exit
other.reveal.to_s
other.value
@value
value
other
exit
other
exit
card == test_board.grid[row_idx][column_idx]
display test_board.grid[row_idx][column_idx]
display card
display test_board.grid
c
card_values
n
card_values
c
s
test_board.grid
@grid
c
@grid
s
exit
@grid
s
@grid
@grid.board
card_values[row_idx * 4 + column_idx]
row_idx
card_values[row_idx]
card_values
column
s
c
n
exit
test_board.grid
n
c
n
card_values
n
ALPHABET
exit
ALPHABET
display card_values
n
card_values
exit
test_board
exit
test_board
